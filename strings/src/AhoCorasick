

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class AhoCorasick {

    public static void main(String[] args) {
        String[] arr = {"cat", "at", "bat", "ten"};
        Trie trie = new Trie();

        for (String s : arr) {
            constructTrie(s, trie);
        }

        for (String s : arr) {
            createDictionaryLink(s, trie, wordTrie(trie, s));
        }

        System.out.println(wordExist(trie, "at"));
        System.out.println(getSubstring(trie, "bbatcat"));
    }

    public static Set<String> getSubstring(Trie trie, String s) {
        Set<String> substrings = new HashSet<>();
        Trie newNode = trie;
        for (int i = 0; i < s.length(); ) {
            char ch = s.charAt(i);

            if (newNode.node[ch - 97] == null) {
                newNode = trie;
            } else {
                newNode = newNode.node[ch - 97];
                i++;
            }

            if (newNode != null && newNode.isAWord) {
                substrings.add(newNode.word);
                // Logic for recursive addition of dictionary links
                Trie dictLink = newNode.dictionaryLink;
                while (dictLink != null) {
                    if (substrings.contains(dictLink.word)) {
                        break;
                    }
                    substrings.add(dictLink.word);
                    dictLink = dictLink.dictionaryLink;
                }
            }
        }

        return substrings;
    }


    public static void createDictionaryLink(String word, Trie trie, Trie ending) {
        Trie newNode = trie;

        for (int i = 1; i < word.length(); i++) {
            char ch = word.charAt(i);
            if (newNode.node[ch - 97] == null) {
                newNode = trie;
            } else {
                newNode = newNode.node[ch - 97];
                if (newNode.isAWord) {
                    ending.dictionaryLink = newNode;
                }
            }
        }
    }

    public static boolean wordExist(Trie trie, String word) {
        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);

            if (trie.node[ch - 97] == null) {
                return false;
            }

            trie = trie.node[ch - 97];
        }

        return trie.isAWord;
    }

    public static Trie wordTrie(Trie trie, String word) {
        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            trie = trie.node[ch - 97];
        }

        return trie;
    }

    public static void constructTrie(String word, Trie trie) {
        String s = "";
        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            s += ch;
            if (trie.node[ch - 97] == null) {
                Trie newTrie = new Trie();
                newTrie.word = s;
                trie.node[ch - 97] = newTrie;
            }

            trie = trie.node[ch - 97];
        }
        trie.word = word;
        trie.isAWord = true;
    }


    static class Trie {

        Trie[] node;
        boolean isAWord;
        String word;
        Trie dictionaryLink;

        Trie() {
            node = new Trie[26];
            isAWord = false;
            word = "";
            dictionaryLink = null;
        }

        @Override
        public String toString() {
            return "Trie{" +
                "node=" + Arrays.toString(node) +
                ", isAWord=" + isAWord +
                ", word='" + word + '\'' +
                ", dictionaryLink=" + dictionaryLink +
                '}';
        }
    }
}
